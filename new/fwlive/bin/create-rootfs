#!/bin/sh

set -e

. ./fwlive.cfg

ROOT="$(pwd)/root"

if [ "$(id -u)" -ne 0 ]; then
	echo "You must be root to do this."
	exit 1
fi

# Create the virtual disk and mount it.
dd if=/dev/zero of=rootfs.img bs=$(( 128 * 1024 )) count=$(( (4096 * 1024 * 1024) / (128 * 1024) ))
mkfs.ext4 -q -F rootfs.img
mkdir -p $ROOT
mount -o loop rootfs.img $ROOT

# Create root directory skeleton.
mkdir -p $ROOT/{dev,proc,sys,tmp,var/tmp,var/cache/pacman-g2,var/log,etc/sysconfig}
mount -t devtmpfs none $ROOT/dev
mount -t sysfs none $ROOT/sys
mount -t proc none $ROOT/proc
mount -t tmpfs none $ROOT/tmp
mount -t tmpfs none $ROOT/var/tmp
mount -o bind /var/cache/pacman-g2 $ROOT/var/cache/pacman-g2

# Setup root directory with pacman-g2.
pacman-g2 --root $ROOT --noprogressbar --noconfirm --config pacman-g2.conf -Sy base newt valgrind gdb terminus-font

# LiveCD customizations beyond here.

# Install fwsetup.
install -m 0755 -o 0 -g 0 src/fwsetup $ROOT/sbin/fwsetup
install -m 0755 -o 0 -g 0 src/fwsetup-valgrind $ROOT/sbin/fwsetup-valgrind
install -m 0644 -o 0 -g 0 src/fwsetup.supp $ROOT/usr/lib/valgrind/fwsetup.supp

# System locale.conf setup.
cat > $ROOT/etc/locale.conf << EOF
LANG=en_US.utf8
EOF

# System vconsole.conf setup.
cat > $ROOT/etc/vconsole.conf << EOF
KEYMAP=us
FONT=ter-v16n
EOF

# System fstab setup.
cat > $ROOT/etc/fstab << EOF
none /proc proc defaults 0 0
none /sys sysfs defaults 0 0
none /tmp tmpfs defaults 0 0
none /var/tmp tmpfs defaults 0 0
none /dev/shm tmpfs defaults 0 0
none /dev/pts devpts gid=5,mode=620 0 0
none /proc/bus/usb usbfs devgid=23,devmode=664 0 0
EOF

# Setup root user.
chroot $ROOT sh -c "echo 'root:fwlive' | chpasswd"

# System hostname setup.
cat > $ROOT/etc/hostname << EOF
fwlive
EOF

# Copy kernel and initrd for later use.
cp $ROOT/boot/vmlinuz vmlinuz
cp $ROOT/boot/initrd initrd

# Unmount all paths mounted earlier.
cp /proc/mounts mounts
while read line; do
	path=$(echo $line | cut -f 2 -d ' ')
	if [ "$path" = "$ROOT" ]; then
		continue
	fi
	if [ "$path" != "${path#$ROOT}" ]; then
		umount $path
	fi
done < mounts
umount $ROOT

# Now shrink the rootfs.img to minimum size.
e2fsck -f -a rootfs.img
resize2fs -M rootfs.img
e2fsck -f -a rootfs.img

# Now prepare the squashfs.
mkdir -p $ROOT/LiveOS
mv rootfs.img $ROOT/LiveOS/rootfs.img
mksquashfs $ROOT squashfs.img -noappend -no-progress -comp lzo

# Clean up leftovers.
rm -rf mounts $ROOT
