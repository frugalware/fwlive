#!/bin/bash -xe

. /etc/makepkg.conf
. $PWD/config

if [ "`id -u`" != 0 ]; then
	echo "Building the chroot as an unprivileged user is not possible."
	exit 1
fi

if [ `mount|grep -o $CHROOTDIR/var/cache/pacman-g2` ]; then
	umount -f $CHROOTDIR/proc
	umount -f $CHROOTDIR/sys
	umount -f $CHROOTDIR/var/cache/pacman-g2
	umount -f $CHROOTDIR
fi

## Check package needs for build
if [ "`pacman-g2 -Q squashfs &>/dev/null;echo $?`" != 0 ]; then
	echo "Installing Squashfs"
	pacman-g2 -S squashfs --noconfirm
fi
if [ "`pacman-g2 -Q syslinux &>/dev/null;echo $?`" != 0 ]; then
        echo "Installing Syslinux"
        pacman-g2 -S syslinux --noconfirm
fi

# Mount loop
mkdir -p $CHROOTDIR
rm -f $TREE/rootfs.img
dd if=/dev/zero of=$TREE/rootfs.img bs=1 count=0 seek=$SIZE
mkfs.ext4 -F $TREE/rootfs.img
mount -o loop $TREE/rootfs.img $CHROOTDIR
mkdir -p $CHROOTDIR/{etc,proc,sys,var/cache/pacman-g2,var/tmp/fst,tmp,var/log}

# Mount chroot
echo "Attempting to mount chroot directories..."
mount -t proc none $CHROOTDIR/proc >/dev/null
mount -t sysfs none $CHROOTDIR/sys >/dev/null
mount -o bind /var/cache/pacman-g2 $CHROOTDIR/var/cache/pacman-g2 >/dev/null
echo "Successfully mounted chroot directories."

# Pre-install tweaks
mkdir -p $CHROOTDIR/etc/{profile.d,sysconfig/network}
## file /etc/profile.d/lang.sh
echo "export LANG=$FWLIVELANG" >$CHROOTDIR/etc/profile.d/lang.sh
echo "export LC_ALL=\$LANG" >> $CHROOTDIR/etc/profile.d/lang.sh
if [ "`echo $FWLIVELANG|sed 's/.*\.\(.*\).*/\1/'`" == utf8 ]; then
	echo "export CHARSET=utf-8" >> $CHROOTDIR/etc/profile.d/lang.sh
else
	case $FWLIVELANG in
		en_US)
			echo "export CHARSET=iso-8859-1" >> $CHROOTDIR/etc/profile.d/lang.sh ;;
		fr_FR)
			echo "export CHARSET=iso-8859-15" >> $CHROOTDIR/etc/profile.d/lang.sh;;
		*)	
			echo "export CHARSET=iso-8859-15" >> $CHROOTDIR/etc/profile.d/lang.sh;;
		esac
fi
chmod +x $CHROOTDIR/etc/profile.d/lang.sh
## file /etc/sysconfig/keymap
## TODO:To improve the function ( ex : for french keymap=fr-latin1 )
case $FWLIVELANG in
	en_*)
		keymap=us ;;
	*)
		keymap=`echo $FWLIVELANG |sed 's/_.*//'` ;;
esac
echo "keymap=$keymap" > $CHROOTDIR/etc/sysconfig/keymap
# file /etc/fstab - just to make systemd-remount-api-vfs.service happy
cat >$CHROOTDIR/etc/fstab <<EOF
none             /proc            proc        defaults         0   0
none             /sys             sysfs       defaults         0   0
devpts           /dev/pts         devpts      gid=5,mode=620   0   0
usbfs            /proc/bus/usb    usbfs       devgid=23,devmode=664 0   0
tmpfs            /dev/shm         tmpfs       defaults         0   0
EOF
# file /etc/sysconfig/network/default
echo "[eth0]" >$CHROOTDIR/etc/sysconfig/network/default
echo "options = dhcp" >>$CHROOTDIR/etc/sysconfig/network/default

case $ARCHBUILD in 
	i686|I686)
		ARCH="i686"
		EXTRAOPTS="--noarch" 
		;;
	*)
		ARCH="x86_64"
		;;
esac
# Build it
echo "Building chroot environment" 
if [ -e pacman-g2.conf ]; then
	rm -f pacman-g2.conf
fi
if [ $TREE == "current" ]; then
	echo "[frugalware-current]" > pacman-g2.conf
fi
if [ $TREE == "stable" ] || echo $TREE |egrep -q '[0-9]+\.[0-9]+'; then
	echo "[frugalware]" > pacman-g2.conf
fi
echo "Server = $MIRROR/frugalware-$TREE/frugalware-$ARCH" >> pacman-g2.conf
## TODO:For Tree Gnometesting
if [ $TREE == "gnometesting" ]; then
	echo "[gnometesting]" > pacman-g2.conf
	echo "Server = http://ftp.frugalware.org/pub/other/people/bouleetbil/$TREE/frugalware-$ARCH" >> pacman-g2.conf
	echo "[frugalware-current]" >> pacman-g2.conf
	echo "Server = $MIRROR/frugalware-current/frugalware-$ARCH" >> pacman-g2.conf
fi
eval PACKAGES=\$INST_${APPSGROUP}_APPS
pacman-g2 -Sy $PACKAGES -r "$CHROOTDIR" --noconfirm --config pacman-g2.conf $EXTRAOPTS

## Install somes locale packages
if [ "`echo $FWLIVELANG |sed 's/_.*//'`" == fr ]; then
	pacman -Sy man-pages-extras-fr man-pages-fr -r "$CHROOTDIR" --noconfirm --config pacman-g2.conf $EXTRAOPTS
fi
if [ $APPSGROUP == "GNOME" ]; then
	if [ -z $LOCALE ]; then
		localelang=`echo $FWLIVELANG |sed 's/\_.*//'`
		pkglocale=aspell-$localelang
	else 
		for i in $(echo $LOCALE | sed -r "s/\,/ /g"); do
			#TODO : check for another language
			if [ $i == "de" ] || [ $i == "hu" ] || [ $i == "it" ]; then
				pkglocale="aspell6-$i "$pkglocale
			else
				pkglocale="aspell-$i "$pkglocale
			fi
		done
	fi
	pacman -Sy $pkglocale -r "$CHROOTDIR" --noconfirm --config pacman-g2.conf $EXTRAOPTS
fi 
## Solve problem with kernel
pacman -Syf kernel -r "$CHROOTDIR" --noconfirm --config pacman-g2.conf $EXTRAOPTS

## Post-install tweaks
#Add utf-8 in /etc/profile.d/less.sh
if [ "`echo $FWLIVELANG|sed 's/.*\.\(.*\).*/\1/'`" == utf8 ]; then
	sed -i -e 's/iso8859/utf-8/g' $CHROOTDIR/etc/profile.d/less.sh
fi
chroot $CHROOTDIR sh /etc/pacman-g2/hooks/update-frugalware-version post_sysupgrade # update /etc/frugalware-release
chroot $CHROOTDIR sh -c "echo 'root:$ROOTPASS' | chpasswd"
if [ -n "$USERNAME" -a -n "$USERPASS" ]; then
	yes ''|chroot $CHROOTDIR /usr/sbin/adduser "$USERNAME" "Fwlive User" "$USERPASS" "/home/$USERNAME"
fi
if [ $APPSGROUP == "MIN" ]; then
	# silence warning about missing /etc/sysconfig/desktop
	ln -sf /lib/systemd/system/multi-user.target $CHROOTDIR/etc/systemd/system/default.target
fi
## file /etc/hostname
echo $FWLHOST > $CHROOTDIR/etc/hostname
## file /etc/issue
sed -i -e 's/Frugalware/Frugalware Livecd based on Frugalware/g' $CHROOTDIR/etc/issue
## file /etc/issue.net
sed 's/Frugalware/Frugalware Livecd/g' $CHROOTDIR/etc/issue.net

## For Appsgroup Gnome
if [ $APPSGROUP == "GNOME" ]; then
	##Autologin
	cat >>$CHROOTDIR/etc/gdm/custom.conf <<EOF
[daemon]
AutomaticLoginEnable=true
AutomaticLogin=fwlive
EOF
	## Enable Networkmanager
	#chroot $CHROOTDIR systemctl enable NetworkManager.service
	ln -s $CHROOTDIR/lib/systemd/system/NetworkManager.service $CHROOTDIR/etc/systemd/system/dbus-org.freedesktop.NetworkManager.service
	ln -s $CHROOTDIR/lib/systemd/system/NetworkManager.service $CHROOTDIR/etc/systemd/system/multi-user.target.wants/NetworkManager.service
	## Enable Show-desktop-icons
   	sed -i -e 's/false/true/g' $CHROOTDIR/usr/share/glib-2.0/schemas/org.gnome.desktop.background.gschema.xml
	chroot $CHROOTDIR glib-compile-schemas usr/share/glib-2.0/schemas
fi

## For Appsgroup Xfce
if [ $APPSGROUP == "XFCE" ]; then
	##Autologin
	cat >>$CHROOTDIR/etc/slim.conf <<EOF
default_user        fwlive
auto_login          yes
EOF
fi

## For fwife
if [ $APPSGROUP != "MIN" ]; then
   mkdir -p $CHROOTDIR/home/fwlive/Desktop/
   chroot $CHROOTDIR chown fwlive:users -R home/fwlive/Desktop
   if [ $APPSGROUP == "KDE" ]; then
     cp $CHROOTDIR/usr/share/applications/fwife-kde.desktop $CHROOTDIR/home/fwlive/Desktop/
     chroot $CHROOTDIR chmod 755 /home/fwlive/Desktop/fwife-kde.desktop
   else
     cp $CHROOTDIR/usr/share/applications/fwife.desktop $CHROOTDIR/home/fwlive/Desktop/
     chroot $CHROOTDIR chmod 755 /home/fwlive/Desktop/fwife.desktop
   fi
fi

## Remove Locales
if [ -z $LOCALE ]; then
	lang=`echo $FWLIVELANG |sed 's/\..*//'`
	localang="-a ! -name `echo $lang | sed 's/_.*//'` -a ! -name $lang"
	
else 
	for i in $(echo $LOCALE | sed -r "s/\,/ /g"); do
	        localang="-a ! -name $i* "$localang
	done
fi
find $CHROOTDIR/usr/share/locale/* -maxdepth 0 -type d ! -name "en" -a ! -name "en_US" $localang -exec rm -fr {} \;

## Remove Docs
echo "Deleting docs files which are not needed in Live mode..."
rm -rf $CHROOTDIR/usr/share/doc/*
rm -rf $CHROOTDIR/usr/share/gtk-doc/*
rm -rf $CHROOTDIR/usr/share/man/*
rm -rf $CHROOTDIR/usr/man/*
rm -rf $CHROOTDIR/usr/share/info/*

## Remove Static libraries and header
## Need /usr/include/python2.7/* for somes progs
echo "Deleting Static libraries and header which are not needed in Live mode..."
#rm -rf $CHROOTDIR/usr/include/*
find $CHROOTDIR/usr/include/* -maxdepth 0 ! -name "python2.7" -exec rm -r {} \;
#find $CHROOTDIR/ -name "*.[ha]" -delete
find $CHROOTDIR/ -path $CHROOTDIR/usr/include/python2.7 -prune -o -name "*.[ha]" -exec rm -f {} \;

## Remove /boot contents, but backup kernel and initrd
echo "Removing boot files which are not needed in Live mode..."
cp -vf $CHROOTDIR/boot/vmlinuz $TREE/vmlinuz
cp -vf $CHROOTDIR/boot/initrd.img.xz $TREE/initrd.img.xz
rm -rf $CHROOTDIR/boot/*

# Save version
sed "s/.* \(.*\) (.*/\1/" $CHROOTDIR/etc/frugalware-release > $TREE/rootfs.version

# Umount chroot
echo "Attempting to umount chroot directories..."
umount $CHROOTDIR/proc >/dev/null
umount $CHROOTDIR/sys >/dev/null
umount $CHROOTDIR/var/cache/pacman-g2 >/dev/null
echo "Successfully umounted chroot directories."

# Umount loop
SIZEROOTFS=`df -m $CHROOTDIR|tr -s ' ' |cut -d' ' -f3|tail -n1`
umount $CHROOTDIR
rmdir $CHROOTDIR

## Resize rootfs.img
REALSIZE=$(( $SIZEROOTFS+300))
echo $REALSIZE
e2fsck -f $TREE/rootfs.img
resize2fs $TREE/rootfs.img $REALSIZE"M"
e2fsck -f $TREE/rootfs.img
